name: Build

on:
  push:
    branches: [main]
    tags: ['*']
    paths-ignore:
    - .devcontainer/**
    - .vscode/**
    - docs/**
    - README.md
    - LICENSE
    - '**/README.md'
    - .github/**
    - '!.github/workflows/build.yml'
  pull_request:
    branches: [main]
    paths-ignore:
    - .devcontainer/**
    - .vscode/**
    - docs/**
    - README.md
    - LICENSE
    - '**/README.md'
    - .github/**
    - '!.github/workflows/build.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

jobs:
  Build:
    runs-on: ubuntu-latest
    outputs:
      shortSha: ${{ steps.gitversion.outputs.shortSha }}
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}
      major: ${{ steps.gitversion.outputs.major }}
      minor: ${{ steps.gitversion.outputs.minor }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersion

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3
      with:
        versionSpec: '6.0.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v3
      id: gitversion
      with:
        useConfigFile: true

    - name: Restore
      run: dotnet restore

    - name: Build
      run: >
        dotnet build
        --configuration Release
        --no-restore
        -p:VersionPrefix=${{ steps.gitversion.outputs.fullSemVer }}

    - name: Test
      run: >
        dotnet test
        --configuration Release
        --no-build
        --collect "Code coverage"

    - name: Pack
      run: >
        dotnet pack
        --no-build
        --configuration Release
        --output ${{ github.workspace }}/tool
        -p:PackageVersion=${{ steps.gitversion.outputs.fullSemVer }}

    - name: Upload Artifact (tool)
      uses: actions/upload-artifact@v4
      with:
        path: ${{ github.workspace }}/tool/*
        name: tool
        retention-days: 1

    - name: Publish to GitHub Packages
      if: ${{ github.actor != 'dependabot[bot]' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')) }}
      run: >
        dotnet nuget push "${{ github.workspace }}/tool/*"
        --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        --api-key ${{ secrets.GITHUB_TOKEN }}
        --skip-duplicate

    - name: Publish to NuGet.org
      if: ${{ github.actor != 'dependabot[bot]' && startsWith(github.ref, 'refs/tags') }}
      run: >
        dotnet nuget push "${{ github.workspace }}/tool/*"
        --source "https://api.nuget.org/v3/index.json"
        --api-key ${{ secrets.NUGET_API_KEY }}
        --skip-duplicate

  Binaries:
    strategy:
      fail-fast: true
      matrix:
        # linux-arm (ArmV7) is not ready for AoT yet (https://github.com/mburumaxwell/azddns/pull/8)
        os: [ 'macos', 'ubuntu', 'windows' ]
        arch: [ 'arm64', 'x86', 'x64' ]
        include:
        # list of RIDs (Runtime Identifiers) can be found at:
        # https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.NETCore.Platforms/src/runtime.json
        - { os: ubuntu, rid-prefix: 'linux' }
        - { os: windows, rid-prefix: 'win' }
        - { os: macos, rid-prefix: 'osx' }
        - { os: windows, archive-type: 'zip' } # windows creates zip files, others default to 'tar'
        # https://github.blog/changelog/2025-01-16-linux-arm64-hosted-runners-now-available-for-free-in-public-repositories-public-preview/
        # https://github.blog/changelog/2025-04-14-windows-arm64-hosted-runners-now-available-in-public-preview
        # macos-latest and macos-14 onwards are arm64 by default
        - { os: ubuntu, arch: 'arm64', runs-on: ubuntu-24.04-arm }
        - { os: windows, arch: 'arm64', runs-on: 'windows-11-arm' }
        exclude:
        # only windows supports x86 for PublishAot
        - { os: macos, arch: 'x86' }
        - { os: ubuntu, arch: 'x86' }

    runs-on: ${{ matrix.runs-on || format('{0}-{1}', matrix.os, 'latest') }}
    needs: Build

    env:
      DOTNET_RID: ${{ format('{0}-{1}', matrix.rid-prefix, matrix.arch) }}
      ARCHIVE_EXT: ${{ matrix.archive-type || 'tar.gz' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4

    - name: Build & Publish
      run: >
        dotnet publish
        --runtime ${{ env.DOTNET_RID }}
        --configuration Release
        -p:PackageVersion=${{ needs.Build.outputs.fullSemVer }}
        -p:VersionPrefix=${{ needs.Build.outputs.fullSemVer }}
        -p:PublishAot=true
        ${{ matrix.os == 'ubuntu' && matrix.arch == 'arm64' && '-p:IlcPath=/usr/bin/aarch64-linux-gnu-ld' || '' }}
        --output ${{ github.workspace }}/binaries/${{ env.DOTNET_RID }}
        AzureDDNS/AzureDDNS.csproj

    - name: Remove Debug Symbols
      shell: bash
      run: rm -rf *.pdb *.dbg *.dSYM
      working-directory: ${{ github.workspace }}/binaries/${{ env.DOTNET_RID }}

    - name: Test (Binary)
      run: ./azddns --version
      working-directory: ${{ github.workspace }}/binaries/${{ env.DOTNET_RID }}

    - name: Upload Artifact (binaries)
      uses: actions/upload-artifact@v4
      with:
        path: ${{ github.workspace }}/binaries/**
        name: binaries-${{ env.DOTNET_RID }}
        retention-days: 1

    - name: Create Archive Folder
      run: mkdir ${{ github.workspace }}/releases

    - name: Create Archive (${{ env.ARCHIVE_EXT }})
      uses: thedoctor0/zip-release@main
      with:
        type: ${{ matrix.archive-type || 'tar' }}
        filename: ${{ github.workspace }}/releases/azddns-${{ needs.Build.outputs.fullSemVer }}-${{ env.DOTNET_RID }}.${{ env.ARCHIVE_EXT }}
        directory: ${{ github.workspace }}/binaries/${{ env.DOTNET_RID }}

    - name: Upload Artifact (releases)
      uses: actions/upload-artifact@v4
      with:
        path: ${{ github.workspace }}/releases/**
        name: releases-${{ env.DOTNET_RID }}
        retention-days: 1

  Docker:
    runs-on: ubuntu-latest
    needs: [Build, Binaries]
    env:
      DOCKER_TAGS: '' # helps with intellisense
      IMAGE_NAME: 'azddns'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Generate tags to use in multi-arch build.
    # This is because we cannot build multi-arch images and load them for later pushing.
    # Different tags are pushed depending on the current ref.
    - name: Compute Docker tags
      id: docker-tags-generator
      uses: actions/github-script@v7
      with:
        script: |
          const { ref } = context;
          const { owner: repoOwner } = context.repo;
          const {
            IMAGE_NAME: imageName,
            SHORT_SHA: shortSha,
            FULL_SEMVER: fullSemVer,
            MAJOR: major,
            MINOR: minor,
          } = process.env;

          let tags = [`ghcr.io/${repoOwner}/${imageName}:${fullSemVer}`];
          if (ref === 'refs/heads/main' || ref.startsWith('refs/tags/')) {
            tags.push(`ghcr.io/${repoOwner}/${imageName}:latest`);
            tags.push(`ghcr.io/${repoOwner}/${imageName}:${shortSha}`);
          }
          if (ref.startsWith('refs/tags/')) {
            tags.push(`ghcr.io/${repoOwner}/${imageName}:${major}.${minor}`);
            tags.push(`ghcr.io/${repoOwner}/${imageName}:${major}`);
          }

          // result is list or CSV
          core.info(`Computed tags: "${tags.join(',')}"`);
          core.exportVariable('DOCKER_TAGS', tags.join(','));
      env:
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        SHORT_SHA: ${{ needs.Build.outputs.shortSha }}
        FULL_SEMVER: ${{ needs.Build.outputs.fullSemVer }}
        MAJOR: ${{ needs.Build.outputs.major }}
        MINOR: ${{ needs.Build.outputs.minor }}

    - name: Download Artifact (binaries)
      uses: actions/download-artifact@v4
      with:
        path: binaries
        pattern: binaries-*
        merge-multiple: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log into registry
      if: ${{ !startsWith(github.ref, 'refs/pull') }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push multi-arch image
      uses: docker/build-push-action@v6
      with:
        context: ${{ github.workspace }}
        file: Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ !startsWith(github.ref, 'refs/pull') }}
        cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
        cache-to: type=inline # sets BUILDKIT_INLINE_CACHE=1
        tags: ${{ env.DOCKER_TAGS }}
        labels: |
          org.opencontainers.image.description="Dynamic DNS (DDNS) tool for Azure DNS"
          org.opencontainers.image.source=${{ github.repository }}
          org.opencontainers.image.version=${{ needs.Build.outputs.fullSemVer }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          com.github.image.run.id=${{ github.run_id }}
          com.github.image.run.number=${{ github.run_number }}
          com.github.image.job.id=${{ github.job }}
          com.github.image.source.sha=${{ github.sha }}
          com.github.image.source.branch=${{ github.ref }}

  Packaging:
    runs-on: ubuntu-latest
    needs: [Build, Binaries]

    steps:
    - name: Download Artifact (releases)
      uses: actions/download-artifact@v4
      with:
        path: releases
        pattern: releases-*
        merge-multiple: true

    - name: Generate checksum
      uses: jmgilman/actions-generate-checksum@v1
      with:
        method: 'sha256'
        output: 'checksum.txt'
        patterns: |
          releases/azddns-*.apk
          releases/azddns-*.deb
          releases/azddns-*.rpm
          releases/azddns-*.tar.gz
          releases/azddns-*.zip

    # retain only the file names
    - name: Strip directory
      uses: jacobtomlinson/gha-find-replace@v3
      with:
        find: "binaries/azddns-"
        replace: "azddns-"
        include: checksum.txt

    - name: Upload Artifact (checksum)
      uses: actions/upload-artifact@v4
      with:
        path: checksum.txt
        name: checksum
        retention-days: 1

    - name: Download Artifact (binaries)
      uses: actions/download-artifact@v4
      with:
        path: binaries
        pattern: binaries-*
        merge-multiple: true

    - name: Upload Artifact (binaries)
      uses: actions/upload-artifact@v4
      with:
        path: ${{ github.workspace }}/binaries/**
        name: binaries
        retention-days: 1

    - name: Upload Artifact (binaries)
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          binaries-*
