name: Build

on:
  push:
    branches: [main]
    tags: ['*']
    paths-ignore:
    - .devcontainer/**
    - .vscode/**
    - docs/**
    - README.md
    - LICENSE
    - '**/README.md'
    - .github/**
    - '!.github/workflows/build.yml'
  pull_request:
    branches: [main]
    paths-ignore:
    - .devcontainer/**
    - .vscode/**
    - docs/**
    - README.md
    - LICENSE
    - '**/README.md'
    - .github/**
    - '!.github/workflows/build.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

jobs:
  Build:
    runs-on: ubuntu-latest
    outputs:
      shortSha: ${{ steps.gitversion.outputs.shortSha }}
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}
      major: ${{ steps.gitversion.outputs.major }}
      minor: ${{ steps.gitversion.outputs.minor }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersion

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3
      with:
        versionSpec: '6.0.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v3
      id: gitversion
      with:
        useConfigFile: true

    - name: Restore
      run: dotnet restore

    - name: Build
      run: >
        dotnet build
        --configuration Release
        --no-restore
        -p:VersionPrefix=${{ steps.gitversion.outputs.fullSemVer }}

    - name: Test
      run: >
        dotnet test
        --configuration Release
        --no-build
        --collect "Code coverage"

    - name: Pack
      run: >
        dotnet pack
        --no-build
        --configuration Release
        --output ${{ github.workspace }}/tool
        -p:PackageVersion=${{ steps.gitversion.outputs.fullSemVer }}

    - name: Upload Artifact (tool)
      uses: actions/upload-artifact@v4
      with:
        path: ${{ github.workspace }}/tool/*
        name: tool
        retention-days: 1

    - name: Publish to GitHub Packages
      if: ${{ github.actor != 'dependabot[bot]' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')) }}
      run: >
        dotnet nuget push "${{ github.workspace }}/tool/*"
        --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        --api-key ${{ secrets.GITHUB_TOKEN }}
        --skip-duplicate

    - name: Publish to NuGet.org
      if: ${{ github.actor != 'dependabot[bot]' && startsWith(github.ref, 'refs/tags') }}
      run: >
        dotnet nuget push "${{ github.workspace }}/tool/*"
        --source "https://api.nuget.org/v3/index.json"
        --api-key ${{ secrets.NUGET_API_KEY }}
        --skip-duplicate

  Native:
    strategy:
      fail-fast: true
      matrix:
        os: [ 'macos', 'ubuntu', 'windows' ]
        arch: [ 'arm64', 'x86', 'x64' ]
        include:
        # list of RIDs (Runtime Identifiers) can be found at:
        # https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.NETCore.Platforms/src/runtime.json
        - { os: ubuntu, rid-prefix: 'linux' }
        - { os: windows, rid-prefix: 'win' }
        - { os: macos, rid-prefix: 'osx' }
        - { os: windows, archive-type: 'zip' } # windows creates zip files, others default to 'tar'
        exclude:
        # only windows supports x86 for PublishAot
        - { os: macos, arch: 'x86' }
        - { os: ubuntu, arch: 'x86' }

    runs-on: ${{ format('{0}-{1}', matrix.os, 'latest') }}
    needs: Build

    env:
      DOTNET_RID: ${{ format('{0}-{1}', matrix.rid-prefix, matrix.arch) }}
      ARCHIVE_EXT: ${{ matrix.archive-type || 'tar.gz' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4

    # NativeAOT does not support full cross-compilation out of the box.
    # When targeting linux-arm64 from a linux-amd64 GitHub Actions runner:
    # - The compiler generates ARM64 native object files
    # - But the host's default linker (ld.bfd or lld) cannot link ARM64 binaries
    # - We explicitly install and use aarch64-linux-gnu-ld, the cross-linker
    #
    # For linux-x64, we skip this override and let the SDK pick the default linker (lld)
    # This setup allows multi-arch AoT builds in one Dockerfile via docker buildx
    # Some guidance from
    # - https://github.com/dotnet/dotnet-docker/blob/main/src/sdk/10.0/trixie-slim-aot/amd64/Dockerfile
    # - https://github.com/dn-vm/dnvm/blob/main/.github/workflows/publish.yml
    # - https://github.com/dotnet/runtimelab/issues/1785#issuecomment-993179119
    # - https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot
    # - scouring the web!
    - name: Install arm64 linker and runtime support
      if: ${{ matrix.os == 'ubuntu' && matrix.arch == 'arm64' }}
      run: |
        sudo apt-get update && \
        sudo apt-get install -y \
          clang llvm zlib1g-dev \
          binutils-aarch64-linux-gnu \
          gcc-aarch64-linux-gnu \
          libc6-dev-arm64-cross

    - name: Build & Publish
      run: >
        dotnet publish
        --runtime ${{ env.DOTNET_RID }}
        --configuration Release
        -p:PackageVersion=${{ needs.Build.outputs.fullSemVer }}
        -p:VersionPrefix=${{ needs.Build.outputs.fullSemVer }}
        -p:PublishAot=true
        ${{ matrix.os == 'ubuntu' && matrix.arch == 'arm64' && '-p:IlcPath=/usr/bin/aarch64-linux-gnu-ld' || '' }}
        --output ${{ github.workspace }}/native/${{ env.DOTNET_RID }}
        AzureDDNS/AzureDDNS.csproj

    - name: Test (Binary) # ensure the CLI can launch (catches global DI issues)
      # ARM runners are in preview and we cannot use them, so we skip this test
      # https://github.blog/changelog/2023-10-30-accelerate-your-ci-cd-with-arm-based-hosted-runners-in-github-actions/
      # TODO: consider using QEMU emulator for ARM?
      if: ${{ !contains(matrix.arch, 'arm') }}
      run: ./azddns --version
      working-directory: ${{ github.workspace }}/native/${{ env.DOTNET_RID }}

    - name: Upload Artifact (native)
      uses: actions/upload-artifact@v4
      with:
        path: ${{ github.workspace }}/native/**
        name: native-${{ env.DOTNET_RID }}
        retention-days: 1

    - name: Create Archive Folder
      run: mkdir ${{ github.workspace }}/releases

    - name: Create Archive (${{ env.ARCHIVE_EXT }})
      uses: thedoctor0/zip-release@main
      with:
        type: ${{ matrix.archive-type || 'tar' }}
        filename: ${{ github.workspace }}/releases/azddns-${{ needs.Build.outputs.fullSemVer }}-${{ env.DOTNET_RID }}.${{ env.ARCHIVE_EXT }}
        directory: ${{ github.workspace }}/native/${{ env.DOTNET_RID }}

    - name: Upload Artifact (releases)
      uses: actions/upload-artifact@v4
      with:
        path: ${{ github.workspace }}/releases/**
        name: releases-${{ env.DOTNET_RID }}
        retention-days: 1

  Docker:
    runs-on: ubuntu-latest
    needs: [Build, Native]
    env:
      DOCKER_TAGS: '' # helps with intellisense
      IMAGE_NAME: 'azddns'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Generate tags to use in multi-arch build.
    # This is because we cannot build multi-arch images and load them for later pushing.
    # Different tags are pushed depending on the current ref.
    - name: Compute Docker tags
      id: docker-tags-generator
      uses: actions/github-script@v7
      with:
        script: |
          const { ref } = context;
          const { owner: repoOwner } = context.repo;
          const {
            IMAGE_NAME: imageName,
            SHORT_SHA: shortSha,
            FULL_SEMVER: fullSemVer,
            MAJOR: major,
            MINOR: minor,
          } = process.env;

          let tags = [`ghcr.io/${repoOwner}/${imageName}:${fullSemVer}`];
          if (ref === 'refs/heads/main' || ref.startsWith('refs/tags/')) {
            tags.push(`ghcr.io/${repoOwner}/${imageName}:latest`);
            tags.push(`ghcr.io/${repoOwner}/${imageName}:${shortSha}`);
          }
          if (ref.startsWith('refs/tags/')) {
            tags.push(`ghcr.io/${repoOwner}/${imageName}:${major}.${minor}`);
            tags.push(`ghcr.io/${repoOwner}/${imageName}:${major}`);
          }

          // result is list or CSV
          core.info(`Computed tags: "${tags.join(',')}"`);
          core.exportVariable('DOCKER_TAGS', tags.join(','));
      env:
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        SHORT_SHA: ${{ needs.Build.outputs.shortSha }}
        FULL_SEMVER: ${{ needs.Build.outputs.fullSemVer }}
        MAJOR: ${{ needs.Build.outputs.major }}
        MINOR: ${{ needs.Build.outputs.minor }}

    - name: Download Artifact (native)
      uses: actions/download-artifact@v4
      with:
        path: native
        pattern: native-*
        merge-multiple: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log into registry
      if: ${{ !startsWith(github.ref, 'refs/pull') }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push multi-arch image
      uses: docker/build-push-action@v6
      with:
        context: ${{ github.workspace }}
        file: Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ !startsWith(github.ref, 'refs/pull') }}
        cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
        cache-to: type=inline # sets BUILDKIT_INLINE_CACHE=1
        tags: ${{ env.DOCKER_TAGS }}
        labels: |
          org.opencontainers.image.description="Dynamic DNS (DDNS) tool for Azure DNS"
          org.opencontainers.image.source=${{ github.repository }}
          org.opencontainers.image.version=${{ needs.Build.outputs.fullSemVer }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          com.github.image.run.id=${{ github.run_id }}
          com.github.image.run.number=${{ github.run_number }}
          com.github.image.job.id=${{ github.job }}
          com.github.image.source.sha=${{ github.sha }}
          com.github.image.source.branch=${{ github.ref }}

  Packaging:
    runs-on: ubuntu-latest
    needs: [Build, Native]

    steps:
    - name: Download Artifact (releases)
      uses: actions/download-artifact@v4
      with:
        path: releases
        pattern: releases-*
        merge-multiple: true

    - name: Generate checksum
      uses: jmgilman/actions-generate-checksum@v1
      with:
        method: 'sha256'
        output: 'checksum.txt'
        patterns: |
          releases/azddns-*.apk
          releases/azddns-*.deb
          releases/azddns-*.rpm
          releases/azddns-*.tar.gz
          releases/azddns-*.zip

    # retain only the file names
    - name: Strip directory
      uses: jacobtomlinson/gha-find-replace@v3
      with:
        find: "native/azddns-"
        replace: "azddns-"
        include: checksum.txt

    - name: Upload Artifact (checksum)
      uses: actions/upload-artifact@v4
      with:
        path: checksum.txt
        name: checksum
        retention-days: 1

    - name: Download Artifact (native)
      uses: actions/download-artifact@v4
      with:
        path: native
        pattern: native-*
        merge-multiple: true

    - name: Upload Artifact (binaries)
      uses: actions/upload-artifact@v4
      with:
        path: ${{ github.workspace }}/native/**
        name: native
        retention-days: 1
